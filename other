// map.js - Final 3D Version with MapLibre GL JS

// --- 1. Initialize 3D Map ---
const maptilerApiKey = 'qfqfN9PAsljL4ynatVPA'; // Get your free key from Maptiler.com
const lightStyle = `https://api.maptiler.com/maps/dataviz-light/style.json?key=${maptilerApiKey}`;
const darkStyle = `https://api.maptiler.com/maps/dataviz-dark/style.json?key=${maptilerApiKey}`;

const map = new maplibregl.Map({
    container: 'map',
    style: lightStyle,
    center: [36.8219, -1.2921],
    zoom: 11.5,
    pitch: 50,
    bearing: -15
});
map.addControl(new maplibregl.NavigationControl(), 'top-right');

// --- 2. Configurations & Global Variables ---
const layerConfigs = {
    heat: { title: 'Urban Heat (°C)', property: 'avg_heat', stops: [[24, '#3498db'], [28, '#f1c40f'], [32, '#e74c3c']], heightScale: [20, 0, 35, 1500] },
    green: { title: 'Green Cover (NDVI)', property: 'avg_ndvi', stops: [[0.3, '#d7b389'], [0.6, '#90c374'], [0.8, '#3d874b']], heightScale: [0, 0, 1, 1000] },
    air: { title: 'Air Quality (NO₂)', property: 'avg_no2', stops: [[0.000045, '#44AF69'], [0.000055, '#F8B229'], [0.000065, '#D13223']], heightScale: [0.00003, 0, 0.00007, 1800] },
    pop: { title: 'Population Density', property: 'avg_pop', stops: [[5000, '#fef0d9'], [20000, '#fdcc8a'], [40000, '#fc8d59']], heightScale: [0, 0, 40000, 2000] },
    flood: { title: 'Flood Risk', property: 'avg_flood_risk', stops: [[0.5, '#ffffcc'], [0.7, '#a1dab4'], [0.9, '#41b6c4']], heightScale: [0.2, 0, 1, 1200] }
};
let activeLayerKey = 'heat';
let chart;

// --- 3. Chart.js Setup ---
const ctx = document.getElementById('wardChart').getContext('2d');
chart = new Chart(ctx, { /* ... same chart setup as before ... */ });

// --- 4. Load Data and Create 3D Layer ---
map.on('load', () => {
    map.addSource('wards-data', {
        'type': 'geojson',
        'data': 'nairobi_ward_data.geojson'
    });
    map.addLayer({
        'id': 'ward-extrusions',
        'type': 'fill-extrusion',
        'source': 'wards-data',
        'paint': {
            'fill-extrusion-opacity': 0.8
            // Color and Height will be set by the toggle function
        }
    });

    // Set the initial layer style
    switchLayer(activeLayerKey);

    // Click handler for popups, dashboard, and recommendations
    map.on('click', 'ward-extrusions', (e) => {
        const props = e.features[0].properties;
        updateDashboard(props);
        generateRecommendation(props);
    });
});

// --- 5. Core Functions ---

function switchLayer(layerKey) {
    activeLayerKey = layerKey;
    const config = layerConfigs[layerKey];
    
    map.setPaintProperty('ward-extrusions', 'fill-extrusion-color', [
        'step', ['get', config.property], '#ccc',
        config.stops[0][0], config.stops[0][1],
        config.stops[1][0], config.stops[1][1],
        config.stops[2][0], config.stops[2][1]
    ]);
    
    const [minVal, minHeight, maxVal, maxHeight] = config.heightScale;
    map.setPaintProperty('ward-extrusions', 'fill-extrusion-height', [
        'interpolate', ['linear'], ['get', config.property],
        minVal, minHeight,
        maxVal, maxHeight
    ]);

    // Update button active states
    document.querySelectorAll('#controls button').forEach(btn => btn.classList.remove('active'));
    document.getElementById(layerKey + 'Btn').classList.add('active');
}

function updateDashboard(props) { /* ... same as before ... */ }

function generateRecommendation(props) {
    let data = {
        heat: props.avg_heat > 28 ? 'Hot' : 'Cool',
        pop: props.avg_pop > 20000 ? 'High' : 'Low',
        air: props.avg_no2 > 0.000055 ? 'High' : 'Low',
        green: props.avg_ndvi < 0.4 ? 'Low' : 'High',
        flood: props.avg_flood_risk > 0.7 ? 'High Risk' : 'Low Risk'
    };
    let suggestion = '';
    // --- Rule-based suggestions (same logic as before) ---
    if (data.flood === 'High Risk' && data.pop === 'High') { /* ... */ }
    // ... other rules ...
    else { suggestion = 'No critical combination of factors detected.'; }
    
    document.getElementById('recommendation-text').textContent = suggestion;
}

// --- 6. Event Listeners ---

// Theme Toggle
document.getElementById('theme-toggle').addEventListener('change', function() {
    map.setStyle(this.checked ? darkStyle : lightStyle);
});

// Layer Toggles
Object.keys(layerConfigs).forEach(key => {
    const button = document.getElementById(key + 'Btn');
    if (button) {
        button.addEventListener('click', () => switchLayer(key));
    }
});